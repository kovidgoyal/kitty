//go:build exclude

// this file is autogenerated by __FILE__ do not edit

package at

import (
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"

	"kitty/tools/cli"
	"kitty/tools/utils"
)

type options_CMD_NAME_type struct {
	OPTIONS_DECLARATION_CODE
}

var options_CMD_NAME options_CMD_NAME_type

type CMD_NAME_json_type struct {
	JSON_DECLARATION_CODE
}

var CMD_NAME_json CMD_NAME_json_type

func create_payload_CMD_NAME(args []string) (payload map[string]interface{}, err error) {
	return
}

func create_rc_CMD_NAME(args []string) (*utils.RemoteControlCmd, error) {
	var err error
	payload, err := create_payload_CMD_NAME(args)
	if err != nil {
		return nil, err
	}
	rc := utils.RemoteControlCmd{
		Cmd:        "CLI_NAME",
		Version:    ProtocolVersion,
		NoResponse: NO_RESPONSE_BASE,
		Payload:    payload,
	}
	return &rc, nil
}

func run_CMD_NAME(cmd *cobra.Command, args []string) (err error) {
	SET_OPTION_VALUES_CODE

	rc, err := create_rc_CMD_NAME(args)
	if err != nil {
		return err
	}
	nrv, err := cmd.Flags().GetBool("no-response")
	if err == nil {
		rc.NoResponse = nrv
	}
	var timeout float64 = WAIT_TIMEOUT
	rt, err := cmd.Flags().GetFloat64("response-timeout")
	if err == nil {
		timeout = rt
	}
	err = send_rc_command(rc, timeout)
	return
}

func aliasNormalizeFunc_CMD_NAME(f *pflag.FlagSet, name string) pflag.NormalizedName {
	name = cli.FlagNormalizer(name)
	ALIAS_NORMALIZE_CODE
	return pflag.NormalizedName(name)
}

func setup_CMD_NAME(root *cobra.Command) *cobra.Command {
	ans := cli.CreateCommand(&cobra.Command{
		Use:   "CLI_NAME [options]",
		Short: "SHORT_DESC",
		Long:  "LONG_DESC",
		RunE:  run_CMD_NAME,
	})
	ADD_FLAGS_CODE
	ans.Flags().SetNormalizeFunc(aliasNormalizeFunc_CMD_NAME)

	return ans
}

func init() {
	all_commands["CMD_NAME"] = setup_CMD_NAME
}
